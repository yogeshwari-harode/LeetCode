class Solution {
    public int maxNumberOfBalloons(String text) {
        HashMap<Character, Integer> map = new HashMap<>();
        int n = text.length();

        // Count the frequency of each character
        for (int i = 0; i < n; i++) {
            char ch = text.charAt(i);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }

        // Calculate how many "balloon" words can be formed
        int b = map.getOrDefault('b', 0);
        int a = map.getOrDefault('a', 0);
        int l = map.getOrDefault('l', 0) / 2; // 'l' appears twice in "balloon"
        int o = map.getOrDefault('o', 0) / 2; // 'o' appears twice in "balloon"
        int nCount = map.getOrDefault('n', 0);

        return Math.min(Math.min(b, a), Math.min(l, Math.min(o, nCount)));
    }
}



//___________________________OR_______________________________


class Solution {
    public int maxNumberOfBalloons(String text) {
        int b = 0, a = 0, l = 0, o = 0, n = 0;
        for (char ch : text.toCharArray()) {
            if (ch == 'b') {
                b++;
            } else if (ch == 'a') {
                a++;
            } else if (ch == 'l') {
                l++;
            } else if (ch == 'o') {
                o++;
            } else if (ch == 'n') {
                n++;
            }
        }
        return Math.min(b, Math.min(a, Math.min(l / 2, Math.min(o / 2, n))));
    }
}
